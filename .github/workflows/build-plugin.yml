name: Build &amp; Obfuscate Plugin
on:
  push:
    tags:
      - '*.*.*.*'
jobs:
  Build:
    permissions:
      contents: write
    runs-on: windows-latest
    env:
      REPO_NAME: ${{ github.repository }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Get Environment Variables
        run: |
          $tag = "${{ github.ref }}" -replace 'refs/tags/', ''
          "tag=$tag" | Out-File -Append -FilePath $Env:GITHUB_ENV

      - name: Prepare signing key
        run: echo "${{ secrets.PFR_SIGNING_PRIVATE_PEM }}" > signing_key.pem

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Download Dalamud Latest
        run: |
          Invoke-WebRequest -Uri https://goatcorp.github.io/dalamud-distrib/latest.zip -OutFile latest.zip
          Expand-Archive -Force latest.zip "$env:AppData\XIVLauncher\addon\Hooks\dev"

      - name: Restore Nuget Packages
        run: dotnet restore PartyFinderReborn/PartyFinderReborn.csproj
        
      - name: Inject private key into Constants.cs
        run: |
          # Create backup of original Constants.cs before injection
          Copy-Item "PartyFinderReborn\Constants.cs" "PartyFinderReborn\Constants.cs.backup" -Force
          
          # Run injection script
          .\scripts\inject-key.ps1 -PrivateKeyPath "signing_key.pem" -ConstantsFilePath "PartyFinderReborn\Constants.cs"
          
          # Verify injection worked but don't expose the key
          $constantsContent = Get-Content "PartyFinderReborn\Constants.cs" -Raw
          if ($constantsContent -match "INJECTED_PRIVATE_KEY") {
            Write-Host "‚ùå Private key injection failed - placeholder still present"
            exit 1
          } elseif ($constantsContent -match "BEGIN PRIVATE KEY") {
            Write-Host "‚úÖ Private key injection completed successfully"
          } else {
            Write-Host "‚ö†Ô∏è  Private key injection status unclear"
          }

      - name: Build Plugin (Self-Contained)
        run: |
          # Build with all dependencies included for obfuscation
          dotnet publish --no-restore -c Release PartyFinderReborn/PartyFinderReborn.csproj -p:AssemblyVersion=${{ env.tag }} -p:FileVersion=${{ env.tag }} -p:PackageVersion=${{ env.tag }} -p:InformationalVersion=${{ env.tag }} -p:DefineConstants="RELEASE_BUILD" --output .\publish --self-contained false
          
          # Also build normally for the final output
          dotnet build --no-restore -c Release PartyFinderReborn/PartyFinderReborn.csproj -p:AssemblyVersion=${{ env.tag }} -p:FileVersion=${{ env.tag }} -p:PackageVersion=${{ env.tag }} -p:InformationalVersion=${{ env.tag }} -p:DefineConstants="RELEASE_BUILD" --output .\build

      - name: Setup ConfuserEx
        run: |
          # Download and setup ConfuserEx CLI
          Invoke-WebRequest -Uri https://github.com/mkaring/ConfuserEx/releases/latest/download/ConfuserEx-CLI.zip -OutFile ConfuserEx-CLI.zip
          Expand-Archive -Force ConfuserEx-CLI.zip -DestinationPath confuserex

      - name: Prepare Obfuscation Environment
        run: |
          # Create directory structure for ConfuserEx
          New-Item -ItemType Directory -Path ".\PartyFinderReborn\bin\Release" -Force
          
          # Copy the main plugin DLL
          Copy-Item ".\build\PartyFinderReborn.dll" ".\PartyFinderReborn\bin\Release\PartyFinderReborn.dll" -Force
          
          # Find .NET installation paths dynamically
          $dotnetRoot = "C:\Program Files\dotnet"
          $netCoreAppPath = Get-ChildItem "$dotnetRoot\shared\Microsoft.NETCore.App" | Where-Object { $_.Name -like "9.*" } | Sort-Object Name -Descending | Select-Object -First 1
          $refPath = Get-ChildItem "$dotnetRoot\packs\Microsoft.NETCore.App.Ref" | Where-Object { $_.Name -like "9.*" } | Sort-Object Name -Descending | Select-Object -First 1
          
          Write-Host "Found .NET paths:"
          Write-Host "  Runtime: $($netCoreAppPath.FullName)"
          Write-Host "  Reference: $($refPath.FullName)\ref\net9.0"
          
          # Copy .NET runtime assemblies
          if ($netCoreAppPath) {
            Get-ChildItem "$($netCoreAppPath.FullName)\*.dll" | Where-Object { 
              $_.Name -match "^(System\.|Microsoft\.|netstandard|mscorlib)"
            } | Copy-Item -Destination ".\PartyFinderReborn\bin\Release\" -Force -ErrorAction SilentlyContinue
          }
          
          # Copy .NET reference assemblies
          if ($refPath) {
            $refAssemblyPath = "$($refPath.FullName)\ref\net9.0"
            if (Test-Path $refAssemblyPath) {
              Get-ChildItem "$refAssemblyPath\*.dll" | Where-Object { 
                $_.Name -match "^(System\.|Microsoft\.|netstandard|mscorlib)"
              } | Copy-Item -Destination ".\PartyFinderReborn\bin\Release\" -Force -ErrorAction SilentlyContinue
            }
          }
          
          # Copy NuGet package dependencies from publish output
          Get-ChildItem ".\publish\*.dll" | Where-Object { 
            $_.Name -in @("BouncyCastle.Cryptography.dll", "ECommons.dll", "Newtonsoft.Json.dll", "System.Net.Http.Json.dll")
          } | Copy-Item -Destination ".\PartyFinderReborn\bin\Release\" -Force -ErrorAction SilentlyContinue
          
          # Copy Dalamud assemblies
          $dalamudPath = "$env:AppData\XIVLauncher\addon\Hooks\dev"
          if (Test-Path "$dalamudPath") {
            Get-ChildItem "$dalamudPath\*.dll" | Copy-Item -Destination ".\PartyFinderReborn\bin\Release\" -Force -ErrorAction SilentlyContinue
          }
          
          Write-Host "Files available for obfuscation:"
          Get-ChildItem ".\PartyFinderReborn\bin\Release\*.dll" | ForEach-Object { Write-Host "  - $($_.Name)" }

      - name: Obfuscate Plugin
        run: |
          # Run obfuscation
          .\confuserex\Confuser.CLI.exe -n ConfuserEx_Minimum.crproj

      - name: Prepare Release Files
        run: |
          # Copy obfuscated DLL back to build directory
          Copy-Item ".\PartyFinderReborn\bin\Release\Confused\PartyFinderReborn.dll" ".\build\PartyFinderReborn.dll" -Force
          # Copy plugin manifest
          Copy-Item ".\PartyFinderReborn\PartyFinderReborn.json" ".\build\PartyFinderReborn.json" -Force

      - name: Zip Plugin
        run: Compress-Archive -Path .\build\* -DestinationPath .\build\PartyFinderReborn.zip

      - name: Publish Plugin
        uses: softprops/action-gh-release@v2
        with:
          files: ./build/PartyFinderReborn.zip
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Security Cleanup
        if: always()
        run: |
          # Remove signing key file
          Remove-Item -Path signing_key.pem -Force -ErrorAction SilentlyContinue
          
          # Restore original Constants.cs from backup to remove injected key
          if (Test-Path "PartyFinderReborn\Constants.cs.backup") {
            Copy-Item "PartyFinderReborn\Constants.cs.backup" "PartyFinderReborn\Constants.cs" -Force
            Write-Host "‚úÖ Restored original Constants.cs from backup"
          }
          
          # Clean up any other sensitive files that might contain the key
          Get-ChildItem -Recurse -Include "*.cs" | Where-Object { 
            (Get-Content $_.FullName -Raw -ErrorAction SilentlyContinue) -match "BEGIN PRIVATE KEY" 
          } | ForEach-Object { 
            Write-Host "‚ö†Ô∏è  Found private key in: $($_.FullName)"
            # Don't actually clean these up as they might be legitimate, just warn
          }
          
          # Clean up build artifacts that might contain sensitive data
          Remove-Item -Path ".\publish" -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item -Path ".\PartyFinderReborn\bin" -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item -Path ".\PartyFinderReborn\obj" -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item -Path ".\Confused" -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item -Path ".\confuserex" -Recurse -Force -ErrorAction SilentlyContinue
          
          Write-Host "üßπ Security cleanup completed"
