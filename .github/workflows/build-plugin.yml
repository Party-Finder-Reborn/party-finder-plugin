name: Build Plugin
on:
  push:
    tags:
      - '*.*.*.*'
jobs:
  Build:
    permissions:
      contents: write
    runs-on: windows-latest
    env:
      REPO_NAME: ${{ github.repository }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Get Environment Variables
        run: |
          $tag = "${{ github.ref }}" -replace 'refs/tags/', ''
          "tag=$tag" | Out-File -Append -FilePath $Env:GITHUB_ENV

      - name: Prepare signing key
        run: echo "${{ secrets.PFR_SIGNING_PRIVATE_PEM }}" > signing_key.pem

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Download Dalamud Latest
        run: |
          Invoke-WebRequest -Uri https://goatcorp.github.io/dalamud-distrib/latest.zip -OutFile latest.zip
          Expand-Archive -Force latest.zip "$env:AppData\XIVLauncher\addon\Hooks\dev"

      - name: Restore Nuget Packages
        run: dotnet restore PartyFinderReborn/PartyFinderReborn.csproj
        
      - name: Create encrypted resource
        run: |
          # Create encrypted resource from private key
          .\scripts\encrypt-resource.ps1 -PrivateKeyPath "signing_key.pem" -OutputPath "PartyFinderReborn\Resources\auth.dat"
          
          # Verify encrypted resource was created
          if (Test-Path "PartyFinderReborn\Resources\auth.dat") {
            $size = (Get-Item "PartyFinderReborn\Resources\auth.dat").Length
            Write-Host "‚úÖ Encrypted resource created successfully ($size bytes)"
          } else {
            Write-Host "‚ùå Failed to create encrypted resource"
            exit 1
          }

      - name: Build Plugin
        run: |
          # Build plugin with encrypted resource
          dotnet build --no-restore -c Release PartyFinderReborn/PartyFinderReborn.csproj -p:AssemblyVersion=${{ env.tag }} -p:FileVersion=${{ env.tag }} -p:PackageVersion=${{ env.tag }} -p:InformationalVersion=${{ env.tag }} -p:DefineConstants="RELEASE_BUILD" --output .\build

      - name: Prepare Release Files
        run: |
          # Copy plugin manifest
          Copy-Item ".\PartyFinderReborn\PartyFinderReborn.json" ".\build\PartyFinderReborn.json" -Force

      - name: Zip Plugin
        run: Compress-Archive -Path .\build\* -DestinationPath .\build\PartyFinderReborn.zip

      - name: Publish Plugin
        uses: softprops/action-gh-release@v2
        with:
          files: ./build/PartyFinderReborn.zip
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Security Cleanup
        if: always()
        run: |
          # Remove the unencrypted signing key file (CRITICAL)
          if (Test-Path "signing_key.pem") {
            Remove-Item -Path signing_key.pem -Force
            Write-Host "‚úÖ Removed unencrypted signing key"
          }
          
          # Remove the production encrypted resource to prevent accidental commit
          if (Test-Path "PartyFinderReborn\Resources\auth.dat") {
            Remove-Item -Path "PartyFinderReborn\Resources\auth.dat" -Force
            Write-Host "‚úÖ Removed production encrypted resource"
          }
          
          # Clean up build artifacts
          Remove-Item -Path ".\build" -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item -Path ".\PartyFinderReborn\bin" -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item -Path ".\PartyFinderReborn\obj" -Recurse -Force -ErrorAction SilentlyContinue
          
          # Verify no sensitive files remain
          $sensitiveFiles = Get-ChildItem -Recurse -Include "*.pem", "*private*key*" -ErrorAction SilentlyContinue
          if ($sensitiveFiles) {
            Write-Host "‚ö†Ô∏è  WARNING: Sensitive files still present:"
            $sensitiveFiles | ForEach-Object { Write-Host "  - $($_.FullName)" }
          } else {
            Write-Host "‚úÖ No sensitive files detected"
          }
          
          Write-Host "üßπ Security cleanup completed"
